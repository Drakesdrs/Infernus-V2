#pragma once

class LocalPlayer : public Actor {
private: virtual void Function261();
private: virtual void Function262();
public: virtual void setSleeping(bool);
public: virtual void setSprinting(bool);
private: virtual void Function265();
private: virtual void Function266();
private: virtual void Function267();
private: virtual void Function268();
private: virtual void Function269();
public: virtual float getSpeed(void);
public: virtual void setSpeed(float);
public: virtual float getJumpPower(void);
private: virtual void Function273();
private: virtual void Function274();
private: virtual void Function275();
private: virtual void Function276();
public: virtual void travel(float, float, float);
public: virtual void applyFinalFriction(float, bool);
public: virtual void updateWalkAnim(void);
private: virtual void Function280();
public: virtual void aiStep(void);
public: virtual void pushActors(void);
public: virtual void lookAt(Actor*, float, float);
public: virtual bool isLookingAtAnEntity(void);
private: virtual void Function285();
public: virtual bool checkSpawnObstruction(void);
public: virtual float getAttackAnim(float);
public: virtual float getItemUseDuration(void);
public: virtual float getItemUseStartupProgress(void);
public: virtual float getItemUseIntervalProgress(void);
public: virtual int getItemuseIntervalAxis(void);
public: virtual int getTimeAlongSwing(void);
private: virtual void Function293();
public: virtual float getMaxHeadXRot(void);
public: virtual Actor getLastHurtByMob(void);
public: virtual void setLastHurtByMob(Actor*);
private: virtual void Function297();
private: virtual void Function298();
private: virtual void Function299();
private: virtual void Function300();
private: virtual void Function301();
public: virtual void doHurtTarget(Actor*);
private: virtual void Function303();
public: virtual void leaveCaravan(void);
public: virtual void joinCaravan(Actor*);
public: virtual bool hasCaravanTail(void);
public: virtual uint64_t getCaravanHead(void);
public: virtual int getArmorValue(void);
public: virtual int getArmorCoverPercentage(void);
private: virtual void Function310();
private: virtual void Function311();
private: virtual void Function312();
private: virtual void Function313();
private: virtual void Function314();
private: virtual void Function315();
private: virtual void Function316();
public: virtual void updateEquipment(void);
public: virtual void clearEquipment(void);
private: virtual void Function319();
private: virtual void Function320();
private: virtual void Function321();
private: virtual void Function322();
private: virtual void Function323();
public: virtual void dropEquipmentOnDeath(void);
private: virtual void Function325();
private: virtual void Function326();
private: virtual void Function327();
private: virtual void Function328();
public: virtual void createAIGoals(void);
private: virtual void Function330();
public: virtual void setItemSlot(int, class ItemStack const&);
public: virtual void setTransitioningSitting(bool);
public: virtual void attackAnimation(Actor*, bool);
private: virtual void Function334();
private: virtual void Function335();
private: virtual void Function336();
private: virtual void Function337();
public: virtual void ascendLadder(void);
public: virtual void ascendScaffolding(void);
public: virtual void descendScaffolding(void);
public: virtual void dropContainer(void);
private: virtual void Function342();
private: virtual void Function343();
public: virtual void jumpFromGround(void);
private: virtual void Function345();
private: virtual void Function346();
private: virtual void Function347();
private: virtual void Function348();
private: virtual void Function349();
public: virtual void dropBags(void);
public: virtual void tickDeath(void);
public: virtual void updateGliding(void);
private: virtual void Function353();
private: virtual void Function354();
public: virtual void destroyRegion(void);
public: virtual void suspendRegion(void);
private: virtual void Function357();
public: virtual bool _fireWillChangeDimension(void);
public: virtual void _fireDimensionChanged(void);
private: virtual void Function360();
public: virtual void tickWorld(void);
private: virtual void Function362();
private: virtual void Function363();
public: virtual void moveView(void);
private: virtual void Function365();
private: virtual void Function366();
private: virtual void Function367();
private: virtual void Function368();
public: virtual void respawn(void);
private: virtual void Function370();
public: virtual void resetPos(bool);
private: virtual void Function372();
public: virtual bool hasResource(int);
public: virtual void completeUsingItem(void);
public: virtual void setPermissions(int);
public: virtual void startDestroying(void);
public: virtual void stopDestroying(void);
private: virtual void Function378();
private: virtual void Function379();
private: virtual void Function380();
public: virtual bool canOpenContainerScreen(void);
private: virtual void Function382();
private: virtual void Function383();
private: virtual void Function384();
private: virtual void Function385();
public: virtual void displayTextObjectMessage(class TextHolder*);
private: virtual void Function387();
private: virtual void Function388();
private: virtual void Function389();
public: virtual void startSleepInBed(Vec3 const&);
public: virtual void stopSleepInBed(bool, bool);
public: virtual bool canStartSleepInBed(void);
public: virtual int getSleepTimer(void);
public: virtual int getPreviousTickSleepTimer(void);
private: virtual void Function395();
private: virtual void Function396();
private: virtual void Function397();
private: virtual void Function398();
private: virtual void Function399();
private: virtual void Function400();
private: virtual void Function401();
private: virtual void Function402();
public: virtual void setPlayerGameType(int);
public: virtual void _crit(Actor&);
private: virtual void Function405();
private: virtual void Function406();
public: virtual void sendEventPacket(class EventPacket);
public: virtual void addExperience(int);
public: virtual void addLevels(int);
private: virtual void Function410();
private: virtual void Function411();
private: virtual void Function412();
private: virtual void Function413();
public: virtual void deleteContainerManager(void);
public: virtual void setFieldOfViewModifier(float);
private: virtual void Function416();
private: virtual void Function417();
private: virtual void Function418();
private: virtual void Function419();
private: virtual void Function420();
public: virtual void startCooldown(class Item const*);
private: virtual void Function422();
private: virtual void Function423();
private: virtual void Function424();
private: virtual void Function425();
private: virtual void Function426();
private: virtual void Function427();
private: virtual void Function428();
private: virtual void Function429();
private: virtual void Function430();
private: virtual void Function431();
private: virtual void Function432();

	public:

	   bool inventoryOpen() {
		   return *reinterpret_cast<int*>(reinterpret_cast<uintptr_t>(this) + 0x1110) > 1;
	   }

	   int getGameType() {
		   return this->isCreative() || this->isAdventure() ? this->isCreative() ? 1 : 2 : 0;
	   }
};